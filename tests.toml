[ratchet.regex.exceptions]
regex = "except:"
valid = [
  """try:
    x = 1
except ValueError:
    pass""",
  """try:
    do_something()
except (IOError, ValueError):
    handle()"""
]
invalid = [
  """
try:
    pass
except:
    pass""",
  """try:
    dangerous()
except:
    recover()"""
]
description = "Bare except clauses catch all exceptions indiscriminately. This can hide bugs and important exceptions. To mitigate this, explicitly state the exception types that will be handled in the except clause."


[ratchet.regex.lightning]
regex = "import pytorch_lightning|from pytorch_lightning"
valid = ["import torch", "from my_project import Trainer"]
invalid = ["import pytorch_lightning", "from pytorch_lightning import LightningModule"]
description = "The standard PyTorch library should be used in lieu of the PyTorch Lightning package."


[ratchet.regex.no_wildcard_imports]
regex = "from\\s+[^\\s]+\\s+import\\s+\\*"
valid = [
  "from module import name1, name2",
  "import module",
  "from package.subpackage import ClassA"
]
invalid = [
  "from math import *",
  "from mypkg.utils import *"
]
description = "Wildcard imports make it unclear which names are in scope and can cause conflicts. Always import only the explicit names you need."


[ratchet.regex.tabs]
regex = "\\t"
valid = [
  """def foo():
    return 42""",
  "print('no tab here')"
]
invalid = [
  """\tprint('starts with tab')""",
  """def bar():
\treturn True"""
]
description = "As per the PEP 8 style guide for Python code, spaces are to be used instead of tabs for indentation. To mitigate this issue, run 'black FILENAME' to reformat the file with black, or manually fix the issue and update your editor to replace tabs with space."


[ratchet.regex.trailing_whitespace]
regex = "[ \\t]+$"
valid = [
  "def foo():\n    return 42",
  "x = 1  # comment"
]
invalid = [
  "def foo():    \n    return 42\t"
]
description = "Trailing whitespace is invisible but can cause noise in diffs and editors."


[ratchet.regex.ensure_trailing_newline]
regex = "\\Z(?<!\\n)\\Z"
valid = [
  "# some code\n\n"
]
invalid = [
  "# code without trailing newline"
]
description = "Text files should end with a newline character to satisfy POSIX tools and avoid diff noise."


[ratchet.regex.no_todo_comments]
regex = "(?i)#.*\\b(?:TODO|FIXME)\\b"
valid = [
  "# This is a regular comment without keywords",
  "print('TODO in string literal is not caught as a comment')",
  "x = 42  # calculation complete"
]
invalid = [
  "# TODO: implement this function",
  "    # FIXME handle edge cases",
  "def foo():\n    # todo: remove debug code",
  "some_var = 'value'  # FIXME: adjust value later"
]
description = "Ensure no TODO or FIXME comments remain in code."


[ratchet.shell.line_too_long]
command = "xargs -n1 awk 'length($0) > 88'"
description = "Black sets the max line-width to 88 to help with the readability of code. Ensure all lines have <89 characters. You can run 'black FILENAME' to fix this issue."
